{"name":"{nodetoo}","tagline":"Express + MVC = {nodetoo}","body":"Inspired by [Express mvc example](https://github.com/visionmedia/express/tree/master/examples/mvc), nodetoo is a MVC framework built on top of [Express](expressjs.com).\r\n\r\n## Installation\r\n\r\n    $ npm install -g nodetoo\r\n\r\n## Quick Start\r\n\r\nAssuming you have created a `project` with Express, please refer [here](http://expressjs.com/guide.html) for the guide.  \r\n\r\n- Create the app\r\n\r\n```\r\n$ cd /project\r\n$ npm install nodetoo\r\n$ nodetoo\r\n``` \r\n\r\n- Bootstrap nodetoo:\r\n\r\n```js\r\nvar express = require('express');\r\nvar nodetoo = require('nodetoo');\r\nvar app = express();\r\n\r\napp.configure(function(){\r\n  ...\r\n  \r\n  // boostrap nodetoo\r\n  nodetoo.bootstrap(app);\r\n  \r\n  app.use(app.router);\r\n  ...\r\n});\r\n\r\n// remove any existing route\r\n...\r\n\r\napp.listen(3000);\r\n```\r\n\r\n- Start the server:\r\n\r\n```\r\n$ node app\r\n```\r\n\r\n## Project Structure\r\n\r\nnodetoo only work on the `app/` and `config/` folder\r\n\r\n```\r\napp/\r\n  controllers/\r\n    home/\r\n      index.js\r\n  models/\r\n      user.js\r\n  views/\r\n    home/\r\n      index.jade\r\nconfig/\r\n    injections/\r\n    plugins/\r\n    routes.js\r\n    setting.js\r\n```\r\n\r\n## Models\r\n\r\nEach js file under `models/` is a model, nodetoo will bootstrap all of them automatically. \r\n\r\n```\r\nmodels/\r\n  user.js\r\n  post.js\r\n  comment.js\r\n```\r\n\r\n## Controllers\r\n\r\nEach folder under `controllers/` is a controller, `index.js` represent the js file.  \r\nLet's take a look at the `controllers/home/index.js` file.\r\n\r\n```js\r\nexports.actions = {\r\n  \r\n  index: function (req, res) {\r\n    res.render('home/index');\r\n  },\r\n\r\n  about: function (req, res) {\r\n    res.render('home/about');\r\n  },\r\n}\r\n```\r\n\r\n__Filters__ are middlewares that run before the action function.\r\n\r\nExports as a function `before`.\r\n```js\r\nexports.before = function (req, res, next) {\r\n    \r\n  console.log('[BEFORE]: ' + req.url);\r\n  next();\r\n}\r\n\r\nexports.actions = {\r\n  \r\n  index: function (req, res) {\r\n    res.render('home/index');\r\n  }\r\n}\r\n```\r\n\r\nExports as an object `before`, support [injection](#injections).\r\n\r\n```js\r\nexports.before = {\r\n  \r\n  all: [\r\n    {\r\n      middlewares: ['logger'],\r\n      except: ['login']\r\n    }\r\n  ],\r\n  only: [\r\n    { \r\n      middlewares: ['watcher'],\r\n      actions: ['login']\r\n    }\r\n  ]\r\n};\r\n```\r\n```\r\nAll actions will use `logger` except `login` action.\r\nOnly `login` action will use `watcher`.\r\n```\r\n\r\nDefine at action and it will be given priority.\r\n```js\r\nexports.actions = {\r\n  \r\n  index: {\r\n    before: ['watcher', 'logger'],\r\n    action: function (req, res) {\r\n      res.render('home/index');\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nHere is the injections\r\n```\r\nconfig/\r\n    injections/\r\n        logger.js\r\n        watcher.js\r\n```\r\n\r\n__Roles__ are use in [Authentication](#authentication) process.\r\n\r\nExports as an object `roles`.\r\n```js\r\nexports.roles = {\r\n\r\n  all: [\r\n    {\r\n      roles: ['*'],\r\n      except: ['login']\r\n    }\r\n  ],\r\n  only: [\r\n    {\r\n      roles: ['user'],\r\n      actions: ['createUser']\r\n    },\r\n    {\r\n      roles: ['admin'],\r\n      actions: ['createUser']\r\n    },\r\n  ]\r\n};\r\n```\r\n```\r\nAll actions has role `*` except `login` action.\r\nOnly `createUser` action has role `user`.\r\nOnly `createUser` action has role `admin`.\r\n```\r\nPS: Role * apply to any roles, but it depend on how you write the authenticator.\r\n\r\nDefine at action and it will be given priority.\r\n```js\r\nexports.actions = {\r\n  \r\n  index: {\r\n    roles: ['*'],\r\n    action: function (req, res) {\r\n      res.render('home/index');\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n## Actions\r\n\r\nAction is a controller method and represent as `[controller].[method]`.\r\n\r\n```\r\nhome.index\r\nhome.about\r\n```\r\n\r\n## Routes\r\n\r\nRoutes are defined in the `config/routes.js` file\r\n\r\n```js\r\nmodule.exports = [\r\n    ['/'                        ,'get'  ,'home.index']\r\n  , ['/about'                   ,'get'  ,'home.about']\r\n]\r\n```\r\n\r\n## Authentication\r\n\r\nWhen roles is configured, {nodetoo} will ask for an authenticator via [injection](#injections).\r\n\r\n```\r\nconfig/\r\n    injections/\r\n        authenticator.js\r\n```\r\n\r\n```js\r\nmodule.exports = function(roles) {\r\n  return function (req, res, next) {\r\n    // retrieve user from session\r\n    var user = req.session.user;\r\n    if (user === undefined) {\r\n      res.status(401).render('401');\r\n    } \r\n    // asterisk skip authorization\r\n    else if (!_.contains(roles, '*') \r\n          && !_.intersection(user.roles, roles).length > 0) {\r\n      res.status(401).render('401');\r\n    } else next();\r\n  }\r\n}\r\n```\r\nBut how you write the authenticator, it is really up to you. \r\nPlease refer to the [example](https://github.com/fliptoo/nodetoo/tree/master/examples/auth).\r\n\r\n## Injections\r\n\r\nAny module under `injections/` folder can be inject with the module filename without the extension.\r\n\r\n```\r\nconfig/\r\n    injections/\r\n        module.js\r\n```\r\n\r\n```\r\nvar module = inject('module');\r\n```\r\n\r\nPS: Actually nothing special with the injection, it is just a global function as `require`.\r\n\r\n## Examples\r\n\r\nClone the nodetoo repo, then install the dev dependencies:\r\n\r\n    $ git clone git://github.com/fliptoo/nodetoo.git --depth 1\r\n    $ cd nodetoo\r\n    $ npm install\r\n\r\nand run whichever examples you want:\r\n\r\n    $ cd examples/basic\r\n    $ node app\r\n    \r\n# Credits\r\n\r\n- [Express](https://github.com/visionmedia/express)\r\n- [i18n-node](https://github.com/mashpie/i18n-node/)\r\n\r\n## License\r\n\r\n(The MIT License)\r\n\r\nCopyright (c) 2013 Fliptoo &lt;fliptoo.studio@gmail.com&gt;\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n'Software'), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","google":"UA-38720726-1","note":"Don't delete this file! It's used internally to help with page regeneration."}